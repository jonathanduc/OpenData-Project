#%%
import streamlit as st
import requests
import pandas as pd
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Configuration de la page Streamlit
st.set_page_config(page_title="OMS", page_icon="üè•", layout="wide", initial_sidebar_state="expanded")

# Fonction pour r√©cup√©rer la liste des indicateurs contenant "Health" dans le nom
def get_indicators():
    url = "https://ghoapi.azureedge.net/api/Indicator?$filter=contains(IndicatorName,'Health')"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json().get('value', [])
        indicators = {item['IndicatorName']: item['IndicatorCode'] for item in data}
        return indicators
    else:
        print("Erreur lors de la r√©cup√©ration des indicateurs.")
        return None

# Fonction pour r√©cup√©rer les donn√©es d'un indicateur sp√©cifique
def get_who_data(indicator_id):
    base_url = "https://ghoapi.azureedge.net/api/"
    url = f"{base_url}{indicator_id}"
    response = requests.get(url)
    
    if response.status_code == 200:
        data = response.json().get('value', [])
        
        # Filtrer les donn√©es pour ne garder que celles o√π NumericValue est non nul
        filtered_data = [entry for entry in data if entry.get('NumericValue') is not None]
        
        # Retourner les donn√©es filtr√©es si elles existent
        return filtered_data if filtered_data else None
    else:
        print("Erreur lors de la r√©cup√©ration des donn√©es.")
        return None

# Fonction pour obtenir les indicateurs avec valeurs NumericValue non vides
def get_indicators_with_numeric_value(limit=10):
    indicators = get_indicators()
    valid_indicators = {}
    
    if indicators:
        with st.spinner('V√©rification des indicateurs pour NumericValue...'):
            for i, (name, code) in enumerate(indicators.items()):
                if i >= limit:  # Limiter le nombre d'indicateurs v√©rifi√©s
                    break
                data = get_who_data(code)
                if data:  # Si get_who_data retourne des donn√©es avec NumericValue non vide
                    valid_indicators[name] = code
    
    return valid_indicators
# Fonction pour convertir les donn√©es en DataFrame
def convert_to_dataframe(data):
    records = []
    for entry in data:
        record = {
                'Country': entry.get('SpatialDim', 'N/A'),
                'Continent': entry.get('ParentLocation', 'N/A'),
                'Year': entry.get('TimeDimensionValue', 'null'),
                'Value': entry.get('NumericValue', 'N/A')
            }
        records.append(record)
    return pd.DataFrame(records)
    
# Options de navigation
page = st.sidebar.selectbox("S√©lectionnez une page", ["Accueil üè†", "Analyse des donn√©es ‚õëÔ∏èüìä ","üìâ Machine Learning üìà", "√Ä propos ‚ÑπÔ∏è"])

# Page d'accueil
if page == "Accueil üè†":
    data = ''
    st.title("Accueil üè†")
    st.title('Analyse des donn√©es de sant√© publique - API de l‚ÄôOMS')
    st.write("Bienvenue sur l'application d'analyse de donn√©es de sant√© publique !")
    st.write("Cet outil r√©cup√®re et affiche les donn√©es de sant√© publique de l'OMS.")
    st.image('https://upload.wikimedia.org/wikipedia/commons/3/3a/Logo_de_l%27Organisation_mondiale_de_la_sant√©.svg',caption='Logo de l\'OMS')
    video_url = "https://www.dailymotion.com/embed/video/x5npp4e"

    st.markdown(
        f"""
        <iframe src="{video_url}" width="1200" height="500" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>
        """,
        unsafe_allow_html=True
    )  

    st.markdown(
        """
        <div style="text-align: right;">
            <img src="https://portal-cdn.scnat.ch/asset/6fa448d9-8935-5622-aabf-a38072964841/2Personalisierte_Gesundheit.png?b=25632ea7-3d85-5198-a1f0-4ad8c9dcd6ac&v=df8f0af8-c032-5691-983d-84399f3dabd8_100&s=BemJi1u43IKhuBMmsD2ab6cA6zawwM6Nr_qD3i5tf6Aj4U4VLzDFpXxq4CBe-B-5Cfj0mHLCg1S89lSrv0ZhXRFcUUkGUGXlPIQrJePIWBtf3kwOZ1sHagPcP8_VmpKU8SOWNLpIKLcQUJrG66a27HSo7itvX6f0pdatcpVpnjc&t=fc13185f-cc70-4eb1-86f2-ea80914407bc&sc=2" width="400">
        </div>
        """,
        unsafe_allow_html=True
    )      
# Analyse des donn√©es
elif page == "Analyse des donn√©es ‚õëÔ∏èüìä ":
    st.title("Analyse des donn√©es de sant√© publique ‚õëÔ∏èüìä")

    # R√©cup√©rer les indicateurs et les afficher dans une liste d√©roulante
    nb_indicators = st.number_input("Nombre d'indicateurs √† afficher", 1, 30, 5)
     # R√©cup√©rer les indicateurs et les afficher dans une liste d√©roulante

    indicators = get_indicators_with_numeric_value(limit=nb_indicators)
    if indicators:
        indicator_name = st.selectbox('S√©lectionnez un indicateur', list(indicators.keys()))
        indicator_id = indicators[indicator_name]
        
        st.write("Vous avez choisi l'indicateur :", indicator_name)

        # Bouton pour analyser les donn√©es
        if st.toggle("Analyser les donn√©es"):
            data = get_who_data(indicator_id)
            if data:
                st.write("Donn√©es brutes :")
                df = convert_to_dataframe(data)

                # Traitement de la colonne Year en format num√©rique et des valeurs 'No d'
                df['Year'] = pd.to_datetime(df['Year'], format= '%Y').dt.to_period('Y')
                df['Value'] = df['Value'].replace('No d', 0).astype(float)

                # Affichage des donn√©es brutes et analyses descriptives
                with st.expander("Voir les donn√©es brutes"):
                    st.dataframe(df, use_container_width=True)
                
                with st.expander("Voir les analyses descriptives"):
                    st.dataframe(df.describe(), use_container_width=True)

                # S√©lection du pays
                select_country = st.selectbox('S√©lectionnez un pays', sorted(df['Country'].unique()))
                st.write(f"Vous avez choisi le pays : {select_country}")

                # Filtrer le DataFrame pour le pays s√©lectionn√©
                country_df = df[df['Country'] == select_country]

                if st.toggle('Voir les graphiques'):
                    # Distribution des valeurs
                    st.write('Distribution des donn√©es :')
                    st.bar_chart(country_df['Value'].value_counts())

                    # S√©lection du type de graphique
                    select_graph = st.selectbox('S√©lectionnez un type de graphique', ['Bar', 'Line'])
                    # Pr√©paration des donn√©es pour le graphique par ann√©e
                    group = country_df.groupby('Year').sum('Value').reset_index()
                    st.write(f"Graphique de l'√©volution de {indicator_name} par ann√©e pour {select_country}")

                    # Affichage du graphique s√©lectionn√©
                    if select_graph == 'Bar':
                        st.bar_chart(data=group, x='Year', y='Value')
                    elif select_graph == 'Line':
                        st.line_chart(data=group, x='Year', y='Value')
                else:
                    st.write("Aucune donn√©e trouv√©e pour cet indicateur.ERRRROR")
            else:
                st.write("Aucune donn√©e trouv√©e pour cet indicateur.")
#Machine Learning
elif page == "üìâ Machine Learning üìà":
    st.title("üìâ Machine Learning üìà")
    nb_indicators = st.number_input("Nombre d'indicateurs √† afficher", 1, 30, 5)
     # R√©cup√©rer les indicateurs et les afficher dans une liste d√©roulante
    indicators = get_indicators_with_numeric_value(limit=nb_indicators)
    if indicators:
        indicator_name = st.selectbox('S√©lectionnez un indicateur', list(indicators.keys()))
        indicator_id = indicators[indicator_name]
        st.write("Vous avez choisi l'indicateur :", indicator_id)
        
        st.write("Vous avez choisi l'indicateur :", indicator_name)

        # Bouton pour analyser les donn√©es
        if st.toggle("Analyses ML"):
            data = get_who_data(indicator_id)
            if data:
                st.write("Donn√©es brutes :")
                df = convert_to_dataframe(data)

                # Traitement de la colonne Year en format num√©rique et des valeurs 'No d'
                df['Year'] = pd.to_datetime(df['Year'], format= '%Y').dt.to_period('Y')
                df['Value'] = df['Value'].replace('No d', 0).astype(float)

                # Affichage des donn√©es brutes et analyses descriptives
                with st.expander("Voir les donn√©es brutes"):
                    st.dataframe(df, use_container_width=True)

                df['Year'] = df['Year'].dt.year

                if st.toggle('R√©gression Lin√©aire'):

                    st.subheader(':blue[R√©gression Lin√©aire]')

                    # Pr√©paration des donn√©es pour le graphique par ann√©e
                    data = df.groupby('Year').sum()
                    data = data.reset_index()
                    data = data[['Year','Value']]
                    
    
                    linear_model = LinearRegression()

                    linear_model.fit(data[['Year']], data['Value'])
                    score = round(linear_model.score(data[['Year']], data['Value']),4)
                    rounded_coefficient = round(linear_model.coef_[0], 4)
                    intercept = round(linear_model.intercept_,4)

                    # Pr√©paration des pr√©dictions
                    years_future = np.array([[2020], [2021], [2022], [2023], [2024], [2025]])
                    predictions = linear_model.predict(years_future)

                    # Initialisation du graphique Plotly
                    fig = go.Figure()

                    # Ajout des donn√©es r√©elles
                    fig.add_trace(go.Scatter(x=data['Year'], y=data['Value'], mode='markers', name='Donn√©es r√©elles', marker=dict(color='blue')))

                    # Ajout de la ligne de r√©gression
                    fig.add_trace(go.Scatter(x=data['Year'], y=linear_model.predict(data[['Year']]), mode='lines', name='R√©gression lin√©aire', line=dict(color='red')))

                    # Ajout des pr√©dictions futures
                    fig.add_trace(go.Scatter(x=years_future.flatten(), y=predictions, mode='lines+markers', name='Pr√©dictions futures', line=dict(dash='dash', color='green')))

                    # Mise en forme du graphique
                    fig.update_layout(
                         title={
                            "text": "R√©gression lin√©aire et pr√©dictions futures",
                            "x": 0.5,  # Centre le titre horizontalement
                            "xanchor": "center",  # Ancre le texte du titre au centre
                            "font": {"size": 20}
                        },
                        xaxis={
                            "title": {
                                "text": "Ann√©e",
                                "font": {"size": 16}  # Taille du titre de l'axe X
                            }
                        },
                        yaxis={
                            "title": {
                                "text": "Valeur",
                                "font": {"size": 16}  # Taille du titre de l'axe Y
                            }
                        },
                        template="plotly_white"
                    )

                    # Interface utilisateur Streamlit
                    st.plotly_chart(fig, use_container_width=True)

                    col1, col2, col3 = st.columns(3)
                    col1.metric('#### Coefficient', rounded_coefficient)
                    col2.metric('#### Intercept', intercept)
                    col3.metric('#### Score R2', score)
                   

                if st.toggle('Clustering'): 

                    st.subheader(':blue[Clustering]')

                    data2 = df.copy()
                    data2 = data2.groupby(['Country','Continent']).sum('Value')
                    data2 = data2.reset_index()

                    # Encodage des continents
                    label_encoder = LabelEncoder()
                    data2['Continent_encoded'] = label_encoder.fit_transform(data2['Continent'])

                    # Conservez les colonnes n√©cessaires pour le clustering
                    data2_for_clustering = data2[['Value', 'Continent_encoded']]

                    # Normalisation des donn√©es
                    scaler = StandardScaler()
                    data2_scaled = scaler.fit_transform(data2_for_clustering)

                    # R√©duction de dimension avec PCA (1 composante principale)
                    pca = PCA(n_components=2)
                    data2_pca = pca.fit_transform(data2_scaled)

                    explained_variance = pca.explained_variance_ratio_ # Variance expliqu√©e par chaque composante principale


                    # M√©thode du coude
                    inertia = []
                    cluster_range = range(1, 11)  # Tester jusqu'√† 10 clusters
                    for k in cluster_range:
                        kmeans = KMeans(n_clusters=k, random_state=42)
                        kmeans.fit(data2_pca)
                        inertia.append(kmeans.inertia_)

                    # Cr√©ez la figure de la m√©thode du coude
                    fig, ax = plt.subplots(figsize=(10, 6))
                    ax.plot(cluster_range, inertia, marker='o', linestyle='-')
                    ax.set_xlabel("Nombre de clusters", fontsize=16)
                    ax.set_ylabel("Inertie (somme des distances au carr√©)", fontsize=16)
                    ax.set_title("M√©thode du coude pour le choix du nombre de clusters", fontsize=20, loc='center')
                    ax.grid(True)

                    # Affichez la figure avec Streamlit
                    st.plotly_chart(fig, clear_figure=True)
                    

                    n_cluster = st.select_slider('Choisir le nombre de clusters', options=[2, 3, 4, 5, 6, 7, 8, 9, 10], value=3)

                    # Clustering avec KMeans
                    kmeans = KMeans(n_clusters= n_cluster, random_state=42)
                    kmeans.fit(data2_pca)
                    data2['Cluster'] = kmeans.labels_
                    data2 = data2[['Country', 'Value', 'Cluster', 'Continent', 'Continent_encoded']]
                    
                    
                    # Cr√©ation de la figure Plotly
                    fig = go.Figure()
                    for cluster in sorted(data2['Cluster'].unique()):
                        cluster_data = data2[data2['Cluster'] == cluster]
                        # Utilisez les valeurs de PCA pour les axes x et y
                        fig.add_trace(go.Scatter(
                            x=data2_pca[data2['Cluster'] == cluster][:, 0],  # Premi√®re composante principale
                            y=data2_pca[data2['Cluster'] == cluster][:, 1],  # Deuxi√®me composante principale
                            mode='markers',
                            name=f'Cluster n¬∞{cluster +1}',
                            marker=dict(symbol='circle', size=10),
                            text=cluster_data['Country'],  # Nom du pays pour le survol
                            hoverinfo="text"  # Affiche uniquement le nom du pays au survol
                        ))

                    # Mise en forme de la figure
                    fig.update_layout(
                        title={
                            "text": "Clustering des pays en fonction des deux premi√®res composantes principales",
                            "x": 0.5,  # Centre le titre horizontalement
                            "xanchor": "center",  # Ancre le texte du titre au centre
                            "font": {"size": 20}
                        },
                        xaxis={
                            "title": {
                                "text": f"Premi√®re composante principale ({explained_variance[0]:.2%} de variance expliqu√©e)",
                                "font": {"size": 16}  # Taille du titre de l'axe X
                            }
                        },
                        yaxis={
                            "title": {
                                "text": f"Deuxi√®me composante principale ({explained_variance[1]:.2%} de variance expliqu√©e)",
                                "font": {"size": 16}  # Taille du titre de l'axe Y
                            }
                        },
                        template="plotly_white"
                    )

                    # Affichage du graphique dans Streamlit
                    st.plotly_chart(fig, use_container_width=True)

                    st.write("### Shape des clusters")
                    col = st.columns(n_cluster)
                    for i in range(n_cluster) : 
                        col[i].metric(f'#### Cluster n¬∞{i+1}', data2[data2['Cluster'] == i].shape[0])
            else : 
                st.write("Aucune donn√©e trouv√©e pour cet indicateur.")
#A propos 
elif page == "√Ä propos ‚ÑπÔ∏è":
    st.title("√Ä propos ‚ÑπÔ∏è")
    st.write("Cet outil a √©t√© cr√©√© dans le cadre du cours d'Open data et Web des donn√©es.")
    st.page_link("https://github.com/jonathanduc/OpenData-Project", label = "Lien vers le projet sur GitHub", icon= "üîó")
    st.page_link("https://www.who.int/data/gho", label = "Lien vers l'API de l'OMS", icon= "üîó")
    st.page_link('https://docs.streamlit.io', label='Lien vers la documentation de Streamlit', icon='üîó')
    st.write("## √Ä propos des d√©veloppeurs")

# Ajout des liens GitHub en utilisant Markdown
    st.markdown(
        """
        **[üîó Duckes Jonathan](https://github.com/jonathanduc)**  
        **[üîó Girondin Audric](https://github.com/aaudric)**
        """
    )
    texte = """ Nous sommes deux √©tudiants en Master 2 et avons entrepris ce projet dans le cadre de notre formation afin de renforcer nos comp√©tences en d√©veloppement d‚Äôapplications et de visualisation de donn√©es. L'objectif de ce projet est de concevoir un dashboard interactif en utilisant Streamlit, une biblioth√®que Python sp√©cialis√©e dans la cr√©ation d'interfaces web.

Le dashboard vise √† fournir une visualisation claire et interactive des donn√©es sur un sujet sp√©cifique, avec des indicateurs cl√©s, des graphiques et une interactivit√© gr√¢ce √† des widgets int√©gr√©s. Pour garantir des donn√©es √† jour et pertinentes, nous utilisons une API pour r√©cup√©rer dynamiquement le dataset n√©cessaire.

Notre travail est structur√© autour de plusieurs √©l√©ments essentiels :
- Un texte explicatif qui clarifie l'objectif du dashboard et son utilit√© pour l'utilisateur.
- L'int√©gration d'une API pour importer les donn√©es en temps r√©el.
- Des indicateurs et des graphiques permettant une analyse visuelle des informations.
- Des fonctionnalit√©s interactives qui permettent aux utilisateurs d'explorer les donn√©es en fonction de leurs besoins sp√©cifiques.

Ce projet est une opportunit√© pour nous de mettre en pratique les comp√©tences acquises en data science et en d√©veloppement, tout en cr√©ant un outil utile et fonctionnel pour une meilleure compr√©hension des donn√©es.
"""
    st.write(texte)
