#%%
import streamlit as st
import requests
import pandas as pd

# Options de navigation
page = st.sidebar.selectbox("S√©lectionnez une page", ["Accueil üè†", "Analyse des donn√©es ‚õëÔ∏èüìä ","Machine Learning", "√Ä propos ‚ÑπÔ∏è"])

# Page d'accueil
if page == "Accueil üè†":
    st.title("Accueil üè†")
    st.title('Analyse des donn√©es de sant√© publique - API de l‚ÄôOMS')
    st.write("Bienvenue sur l'application d'analyse de donn√©es de sant√© publique !")
    st.write("Cet outil r√©cup√®re et affiche les donn√©es de sant√© publique de l'OMS.")
    st.image('https://upload.wikimedia.org/wikipedia/commons/3/3a/Logo_de_l%27Organisation_mondiale_de_la_sant√©.svg')
    st.image('https://portal-cdn.scnat.ch/asset/6fa448d9-8935-5622-aabf-a38072964841/2Personalisierte_Gesundheit.png?b=25632ea7-3d85-5198-a1f0-4ad8c9dcd6ac&v=df8f0af8-c032-5691-983d-84399f3dabd8_100&s=BemJi1u43IKhuBMmsD2ab6cA6zawwM6Nr_qD3i5tf6Aj4U4VLzDFpXxq4CBe-B-5Cfj0mHLCg1S89lSrv0ZhXRFcUUkGUGXlPIQrJePIWBtf3kwOZ1sHagPcP8_VmpKU8SOWNLpIKLcQUJrG66a27HSo7itvX6f0pdatcpVpnjc&t=fc13185f-cc70-4eb1-86f2-ea80914407bc&sc=2')

# Analyse des donn√©es
elif page == "Analyse des donn√©es ‚õëÔ∏èüìä ":
    st.title("Analyse des donn√©es de sant√© publique ‚õëÔ∏èüìä")
    # Fonction pour r√©cup√©rer la liste des indicateurs depuis l'API de l'OMS
    def get_indicators():
        url = "https://ghoapi.azureedge.net/api/Indicator?$filter=contains(IndicatorName,'Health')"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()['value']
            indicators = {item['IndicatorName']: item['IndicatorCode'] for item in data}
            return indicators
        else:
            st.error("Erreur lors de la r√©cup√©ration des indicateurs.")
            return None

    # Fonction pour r√©cup√©rer les donn√©es de l'API de l'OMS pour un indicateur sp√©cifique
    def get_who_data(indicator_id):
        base_url = "https://ghoapi.azureedge.net/api/"
        url = f"{base_url}{indicator_id}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return data['value']  # Les donn√©es sont dans la cl√© 'value'
        else:
            st.error("Erreur lors de la r√©cup√©ration des donn√©es.")
            return None

    # Fonction pour convertir les donn√©es en DataFrame
    def convert_to_dataframe(data):
        records = []
        for entry in data:
            record = {
                'Country': entry.get('SpatialDim', 'N/A'),
                'Year': entry.get('TimeDim', 'null'),
                'Value': entry.get('Value', 'N/A')
            }
            records.append(record)
        return pd.DataFrame(records)

    # R√©cup√©rer les indicateurs et les afficher dans une liste d√©roulante
    indicators = get_indicators()
    if indicators:
        indicator_name = st.selectbox('S√©lectionnez un indicateur', list(indicators.keys()))
        indicator_id = indicators[indicator_name]
        
        st.write("Vous avez choisi l'indicateur :", indicator_name)

        # Bouton pour analyser les donn√©es
        if st.toggle("Analyser les donn√©es"):
            data = get_who_data(indicator_id)
            if data:
                st.write("Donn√©es brutes :")
                df = convert_to_dataframe(data)

                # Traitement de la colonne Year en format num√©rique et des valeurs 'No d'
                df['Year'] = pd.to_numeric(df['Year'], errors='coerce')
                df['Value'] = df['Value'].replace('No d', 0).astype(float)

                # Affichage des donn√©es brutes et analyses descriptives
                with st.expander("Voir les donn√©es brutes"):
                    st.dataframe(df, use_container_width=True)
                
                with st.expander("Voir les analyses descriptives"):
                    st.dataframe(df.describe(), use_container_width=True)

                # S√©lection du pays
                select_country = st.selectbox('S√©lectionnez un pays', sorted(df['Country'].unique()))
                st.write(f"Vous avez choisi le pays : {select_country}")

                # Filtrer le DataFrame pour le pays s√©lectionn√©
                country_df = df[df['Country'] == select_country]

                if st.toggle('Voir les graphiques'):
                    # Distribution des valeurs
                    st.write('Distribution des donn√©es :')
                    st.bar_chart(country_df['Value'].value_counts())

                    # S√©lection du type de graphique
                    select_graph = st.selectbox('S√©lectionnez un type de graphique', ['Bar', 'Line'])
                    # Pr√©paration des donn√©es pour le graphique par ann√©e
                    group = country_df.groupby('Year').sum('Value').reset_index()
                    st.write(f"Graphique de l'√©volution de {indicator_name} par ann√©e pour {select_country}")

                    # Affichage du graphique s√©lectionn√©
                    if select_graph == 'Bar':
                        st.bar_chart(data=group, x='Year', y='Value')
                    elif select_graph == 'Line':
                        st.line_chart(data=group, x='Year', y='Value')
                else:
                    st.write("Aucune donn√©e trouv√©e pour cet indicateur.ERRRROR")
            else:
                st.write("Aucune donn√©e trouv√©e pour cet indicateur.")
#Machine Learning
elif page == "Machine Learning":
    st.title("Machine Learning")
    st.write("Bienvenue sur la page Machine Learning")
    st.write("Cette page est d√©di√©e √† l'analyse des donn√©es de sant√© publique √† l'aide de mod√®les de Machine Learning.")
    st.write("## Pr√©traitement des donn√©es")
    st.write("Nous allons commencer par pr√©traiter les donn√©es avant de les utiliser pour entra√Æner un mod√®le de Machine Learning.")
    st.write("### Traitement des valeurs manquantes")
    st.write("Nous allons remplacer les valeurs manquantes par la moyenne de chaque colonne.")

#A propos 
elif page == "√Ä propos ‚ÑπÔ∏è":
    st.title("√Ä propos ‚ÑπÔ∏è")
    st.write("Cet outil a √©t√© cr√©√© dans le cadre du cours d'Open data et Web des donn√©es.")
    st.page_link("https://github.com/jonathanduc/OpenData-Project", label = "Lien vers le projet sur GitHub", icon= "üîó")
    st.page_link("https://www.who.int/data/gho", label = "Lien vers l'API de l'OMS", icon= "üîó")
    st.page_link('https://docs.streamlit.io', label='Lien vers la documentation de Streamlit', icon='üîó')
    st.write("## √Ä propos des d√©veloppeurs")

# Ajout des liens GitHub en utilisant Markdown
    st.markdown(
        """
        **[üîó Jonathan Duckes](https://github.com/jonathanduc)**  
        **[üîó Girondin Audric](https://github.com/aaudric)**
        """
    )
    texte = """ Nous sommes deux √©tudiants en Master 2 et avons entrepris ce projet dans le cadre de notre formation afin de renforcer nos comp√©tences en d√©veloppement d‚Äôapplications et de visualisation de donn√©es. L'objectif de ce projet est de concevoir un dashboard interactif en utilisant Streamlit, une biblioth√®que Python sp√©cialis√©e dans la cr√©ation d'interfaces web.

Le dashboard vise √† fournir une visualisation claire et interactive des donn√©es sur un sujet sp√©cifique, avec des indicateurs cl√©s, des graphiques et une interactivit√© gr√¢ce √† des widgets int√©gr√©s. Pour garantir des donn√©es √† jour et pertinentes, nous utilisons une API pour r√©cup√©rer dynamiquement le dataset n√©cessaire.

Notre travail est structur√© autour de plusieurs √©l√©ments essentiels :
- Un texte explicatif qui clarifie l'objectif du dashboard et son utilit√© pour l'utilisateur.
- L'int√©gration d'une API pour importer les donn√©es en temps r√©el.
- Des indicateurs et des graphiques permettant une analyse visuelle des informations.
- Des fonctionnalit√©s interactives qui permettent aux utilisateurs d'explorer les donn√©es en fonction de leurs besoins sp√©cifiques.

Ce projet est une opportunit√© pour nous de mettre en pratique les comp√©tences acquises en data science et en d√©veloppement, tout en cr√©ant un outil utile et fonctionnel pour une meilleure compr√©hension des donn√©es.
"""
    st.write(texte)
